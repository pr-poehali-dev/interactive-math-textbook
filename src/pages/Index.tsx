import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';
import { Badge } from '@/components/ui/badge';

interface Grade {
  id: number;
  title: string;
  color: string;
}

interface Topic {
  id: string;
  title: string;
  icon: string;
  color: string;
  emoji: string;
  grades: number[];
}

interface TaskGenerator {
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
  hint: string;
}

interface TimerResult {
  correct: number;
  wrong: number;
  total: number;
}

const grades: Grade[] = [
  { id: 1, title: '1 –∫–ª–∞—Å—Å', color: 'from-orange-400 to-orange-600' },
  { id: 2, title: '2 –∫–ª–∞—Å—Å', color: 'from-purple-400 to-purple-600' },
  { id: 3, title: '3 –∫–ª–∞—Å—Å', color: 'from-blue-400 to-blue-600' },
  { id: 4, title: '4 –∫–ª–∞—Å—Å', color: 'from-green-400 to-green-600' },
];

const topics: Topic[] = [
  { id: 'addition', title: '–°–ª–æ–∂–µ–Ω–∏–µ', icon: 'Plus', color: 'from-orange-400 to-orange-600', emoji: '‚ûï', grades: [1, 2, 3, 4] },
  { id: 'subtraction', title: '–í—ã—á–∏—Ç–∞–Ω–∏–µ', icon: 'Minus', color: 'from-purple-400 to-purple-600', emoji: '‚ûñ', grades: [1, 2, 3, 4] },
  { id: 'multiplication', title: '–£–º–Ω–æ–∂–µ–Ω–∏–µ', icon: 'X', color: 'from-blue-400 to-blue-600', emoji: '‚úñÔ∏è', grades: [2, 3, 4] },
  { id: 'division', title: '–î–µ–ª–µ–Ω–∏–µ', icon: 'Divide', color: 'from-pink-400 to-pink-600', emoji: '‚ûó', grades: [2, 3, 4] },
  { id: 'geometry', title: '–ì–µ–æ–º–µ—Ç—Ä–∏—è', icon: 'Box', color: 'from-green-400 to-green-600', emoji: 'üî∑', grades: [1, 2, 3, 4] },
  { id: 'logic', title: '–õ–æ–≥–∏–∫–∞', icon: 'Brain', color: 'from-pink-400 to-pink-600', emoji: 'üß©', grades: [1, 2, 3, 4] },
  { id: 'patterns', title: '–ß–∏—Å–ª–æ–≤—ã–µ —Ä—è–¥—ã', icon: 'ArrowRight', color: 'from-yellow-400 to-yellow-600', emoji: 'üî¢', grades: [1, 2, 3, 4] },
];

const generateTask = (topicId: string, grade: number): TaskGenerator => {
  const rand = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;
  
  switch (topicId) {
    case 'addition': {
      const questionTypes = [
        () => {
          const a = rand(1, grade * 10);
          const b = rand(1, grade * 10);
          const correct = a + b;
          const options = [correct - 2, correct - 1, correct, correct + 1].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${a} + ${b}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} + ${b} = ${correct}. –ú–æ–ª–æ–¥–µ—Ü! üéâ`,
            hint: `–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –ø–∞–ª—å—á–∏–∫–∞—Ö –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–π ${a} –∫—Ä—É–∂–æ—á–∫–æ–≤ –∏ –¥–æ–±–∞–≤—å –µ—â—ë ${b}!`
          };
        },
        () => {
          const a = rand(1, grade * 8);
          const b = rand(1, grade * 8);
          const c = rand(1, grade * 5);
          const correct = a + b + c;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `${a} + ${b} + ${c} = ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} + ${b} + ${c} = ${correct}. –°—É–ø–µ—Ä! üåü`,
            hint: `–°–Ω–∞—á–∞–ª–∞ —Å–ª–æ–∂–∏ ${a} + ${b} = ${a+b}, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤—å ${c}!`
          };
        },
        () => {
          const a = rand(5, grade * 10);
          const result = rand(a + 5, a + grade * 10);
          const correct = result - a;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `${a} + ? = ${result}`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} + ${correct} = ${result}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéØ`,
            hint: `–ü–æ–¥—É–º–∞–π: —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ ${a}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ${result}?`
          };
        }
      ];
      return questionTypes[rand(0, questionTypes.length - 1)]();
    }
    
    case 'subtraction': {
      const questionTypes = [
        () => {
          const a = rand(grade * 5, grade * 10);
          const b = rand(1, a);
          const correct = a - b;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n >= 0).sort(() => Math.random() - 0.5);
          return {
            question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${a} - ${b}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} - ${b} = ${correct}. –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚≠ê`,
            hint: `–ù–∞—á–Ω–∏ —Å —á–∏—Å–ª–∞ ${a} –∏ –æ—Ç–Ω–∏–º–∏ ${b}. –ú–æ–∂–µ—à—å —Å—á–∏—Ç–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É!`
          };
        },
        () => {
          const a = rand(grade * 5, grade * 12);
          const b = rand(1, a / 2);
          const c = rand(1, (a - b) / 2);
          const correct = a - b - c;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n >= 0).sort(() => Math.random() - 0.5);
          return {
            question: `${a} - ${b} - ${c} = ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} - ${b} - ${c} = ${correct}. –û—Ç–ª–∏—á–Ω–æ! üí™`,
            hint: `–°–Ω–∞—á–∞–ª–∞ ${a} - ${b} = ${a-b}, –ø–æ—Ç–æ–º –æ—Ç–Ω–∏–º–∏ ${c}!`
          };
        },
        () => {
          const b = rand(5, grade * 8);
          const correct = rand(b + 5, grade * 12);
          const a = correct + b;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n >= 0).sort(() => Math.random() - 0.5);
          return {
            question: `${a} - ${b} = ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${a} - ${b} = ${correct}. –£–º–Ω–∏—Ü–∞! üåà`,
            hint: `–û—Ç ${a} —É–±–µ—Ä–∏ ${b}!`
          };
        }
      ];
      return questionTypes[rand(0, questionTypes.length - 1)]();
    }
    
    case 'multiplication': {
      const a = rand(2, grade + 3);
      const b = rand(2, grade + 3);
      const correct = a * b;
      const options = [correct - 2, correct, correct + 2, correct + 4].filter(n => n > 0).sort(() => Math.random() - 0.5);
      return {
        question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${a} √ó ${b}?`,
        options: options.map(String),
        correctAnswer: options.indexOf(correct),
        explanation: `${a} √ó ${b} = ${correct}. –û—Ç–ª–∏—á–Ω–æ! üåü`,
        hint: `–£–º–Ω–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –º—ã —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ ${a} —Ä–æ–≤–Ω–æ ${b} —Ä–∞–∑!`
      };
    }
    
    case 'division': {
      const b = rand(2, grade + 2);
      const correct = rand(2, grade + 3);
      const a = b * correct;
      const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
      return {
        question: `–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç ${a} √∑ ${b}?`,
        options: options.map(String),
        correctAnswer: options.indexOf(correct),
        explanation: `${a} √∑ ${b} = ${correct}. –í–µ—Ä–Ω–æ! üéØ`,
        hint: `–ü–æ–¥—É–º–∞–π: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ ${b} –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ ${a}? –ò–ª–∏ ${b} √ó ? = ${a}`
      };
    }
    
    case 'geometry': {
      const questionTypes = [
        () => {
          const shapes = [
            { name: '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞', count: 3, emoji: 'üìê' },
            { name: '–∫–≤–∞–¥—Ä–∞—Ç–∞', count: 4, emoji: 'üü¶' },
            { name: '–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞', count: 4, emoji: 'üìè' },
            { name: '–ø—è—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞', count: 5, emoji: '‚¨ü' },
            { name: '–∫—Ä—É–≥–∞', count: 0, emoji: '‚≠ï' }
          ];
          const shape = shapes[rand(0, shapes.length - 1)];
          const options = [shape.count - 1, shape.count, shape.count + 1, shape.count + 2].filter(n => n >= 0).sort(() => Math.random() - 0.5);
          return {
            question: `–°–∫–æ–ª—å–∫–æ —É–≥–ª–æ–≤ —É ${shape.name}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(shape.count),
            explanation: `–£ ${shape.name} ${shape.count} ${shape.count === 1 ? '—É–≥–æ–ª' : shape.count < 5 ? '—É–≥–ª–∞' : '—É–≥–ª–æ–≤'}! ${shape.emoji}`,
            hint: shape.count === 0 ? '–ö—Ä—É–≥ ‚Äî –∑–∞–º–∫–Ω—É—Ç–∞—è –ª–∏–Ω–∏—è –±–µ–∑ —É–≥–ª–æ–≤!' : `–ü–æ—Å—á–∏—Ç–∞–π —É–≥–ª—ã —É —Ñ–∏–≥—É—Ä—ã!`
          };
        },
        () => {
          const side = rand(2, 8);
          const count = rand(3, 6);
          const perimeter = side * count;
          const options = [perimeter - 2, perimeter, perimeter + 2, perimeter + 4].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ü–µ—Ä–∏–º–µ—Ç—Ä —Ñ–∏–≥—É—Ä—ã —Å ${count} —Ä–∞–≤–Ω—ã–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –ø–æ ${side} —Å–º?`,
            options: options.map(String),
            correctAnswer: options.indexOf(perimeter),
            explanation: `${count} √ó ${side} = ${perimeter} —Å–º. –ú–æ–ª–æ–¥–µ—Ü! üìè`,
            hint: `–°–ª–æ–∂–∏ –≤—Å–µ ${count} —Å—Ç–æ—Ä–æ–Ω—ã: ${side} + ${side}...`
          };
        },
        () => {
          const a = rand(3, 10);
          const b = rand(3, 10);
          const area = a * b;
          const options = [area - 2, area, area + 2, area + 4].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ ${a}√ó${b} —Å–º?`,
            options: options.map(String),
            correctAnswer: options.indexOf(area),
            explanation: `${a} √ó ${b} = ${area} —Å–º¬≤. –û—Ç–ª–∏—á–Ω–æ! üéØ`,
            hint: `–£–º–Ω–æ–∂—å –¥–ª–∏–Ω—É ${a} –Ω–∞ —à–∏—Ä–∏–Ω—É ${b}!`
          };
        }
      ];
      return questionTypes[rand(0, Math.min(questionTypes.length - 1, grade === 1 ? 0 : questionTypes.length - 1))]();
    }
    
    case 'logic': {
      const questionTypes = [
        () => {
          const colors = ['üî¥', 'üîµ', 'üü¢', 'üü°', 'üü£', 'üü†'];
          const patternLength = rand(2, 3);
          const pattern = [];
          for (let i = 0; i < patternLength; i++) {
            pattern.push(colors[rand(0, colors.length - 1)]);
          }
          const sequence = [...pattern, ...pattern];
          const correct = pattern[0];
          const wrongOptions = colors.filter(c => c !== correct);
          const options = [correct, ...wrongOptions.slice(0, 3)].sort(() => Math.random() - 0.5);
          return {
            question: `–ü—Ä–æ–¥–æ–ª–∂–∏ —É–∑–æ—Ä: ${sequence.join(' ')} ?`,
            options,
            correctAnswer: options.indexOf(correct),
            explanation: `–£–∑–æ—Ä –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è: ${pattern.join(' ')}! üé®`,
            hint: `–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø–µ—Ä–≤—ã–µ ${patternLength} —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –æ–Ω–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è!`
          };
        },
        () => {
          const isEven = rand(0, 1) === 0;
          const numbers = [];
          const start = rand(2, 10);
          for (let i = 0; i < 4; i++) {
            numbers.push(isEven ? start + i * 2 : start + i * 2 + 1);
          }
          const odd = isEven ? numbers[0] + 1 : numbers[0] - 1;
          numbers.splice(rand(1, 3), 0, odd);
          const options = numbers.sort(() => Math.random() - 0.5).slice(0, 4);
          return {
            question: `–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ª–∏—à–Ω–µ–µ: ${numbers.join(', ')}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(odd),
            explanation: `${odd} ‚Äî ${isEven ? '–Ω–µ—á—ë—Ç–Ω–æ–µ' : '—á—ë—Ç–Ω–æ–µ'}, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ${isEven ? '—á—ë—Ç–Ω—ã–µ' : '–Ω–µ—á—ë—Ç–Ω—ã–µ'}! üßÆ`,
            hint: `–í—Å–µ —á–∏—Å–ª–∞ –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 2 ${isEven ? '–±–µ–∑' : '—Å'} –æ—Å—Ç–∞—Ç–∫–æ–º!`
          };
        },
        () => {
          const fruits = ['üçé', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçì'];
          const correct = fruits[rand(0, fruits.length - 1)];
          const other = fruits.filter(f => f !== correct)[rand(0, fruits.length - 2)];
          const count1 = rand(3, 5);
          const count2 = rand(1, 2);
          const sequence = [...Array(count1).fill(correct), ...Array(count2).fill(other)];
          const shuffled = sequence.sort(() => Math.random() - 0.5);
          const options = [correct, ...fruits.filter(f => f !== correct).slice(0, 3)].sort(() => Math.random() - 0.5);
          return {
            question: `–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—â–µ: ${shuffled.join(' ')}?`,
            options,
            correctAnswer: options.indexOf(correct),
            explanation: `${correct} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${count1} —Ä–∞–∑! üéØ`,
            hint: `–ü–æ—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è!`
          };
        },
        () => {
          const num1 = rand(5, 15);
          const num2 = rand(num1 + 5, num1 + 15);
          const num3 = rand(num2 + 5, num2 + 15);
          const options = [num1, num2, num3, rand(1, num1 - 1)].sort((a, b) => a - b);
          const correct = options[options.length - 1];
          return {
            question: `–ö–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ: ${options.join(', ')}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${correct} ‚Äî —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ! üèÜ`,
            hint: `–°—Ä–∞–≤–Ω–∏ –≤—Å–µ —á–∏—Å–ª–∞ –∏ –Ω–∞–π–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ!`
          };
        },
        () => {
          const shapes = ['‚≠ê', '‚ù§Ô∏è', 'üî∑', '‚¨õ'];
          const patternTypes = rand(0, 1);
          let sequence, correct;
          if (patternTypes === 0) {
            const shape1 = shapes[rand(0, shapes.length - 1)];
            const shape2 = shapes.filter(s => s !== shape1)[rand(0, shapes.length - 2)];
            sequence = [shape1, shape2, shape1, shape2, shape1];
            correct = shape2;
          } else {
            const shape = shapes[rand(0, shapes.length - 1)];
            sequence = [shape, shape, shape];
            correct = shape;
          }
          const options = [correct, ...shapes.filter(s => s !== correct).slice(0, 3)].sort(() => Math.random() - 0.5);
          return {
            question: `–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä—è–¥: ${sequence.join(' ')} ?`,
            options,
            correctAnswer: options.indexOf(correct),
            explanation: `–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct}! –£–∑–æ—Ä –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è! üé®`,
            hint: `–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!`
          };
        },
        () => {
          const a = rand(3, 12);
          const b = rand(2, 8);
          const operations = [
            { q: `${a} –±–æ–ª—å—à–µ ${b} –Ω–∞`, ans: a - b, exp: `${a} - ${b} = ${a - b}` },
            { q: `${a} –º–µ–Ω—å—à–µ ${a + b} –Ω–∞`, ans: b, exp: `${a + b} - ${a} = ${b}` },
            { q: `–°—É–º–º–∞ ${a} –∏ ${b} —Ä–∞–≤–Ω–∞`, ans: a + b, exp: `${a} + ${b} = ${a + b}` }
          ];
          const op = operations[rand(0, operations.length - 1)];
          const correct = op.ans;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `${op.q}?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `${op.exp}! –ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéØ`,
            hint: `–ü–æ–¥—É–º–∞–π –Ω–∞–¥ —Å–ª–æ–≤–∞–º–∏ –∑–∞–¥–∞—á–∏!`
          };
        }
      ];
      return questionTypes[rand(0, questionTypes.length - 1)]();
    }
    
    case 'patterns': {
      const questionTypes = [
        () => {
          const step = rand(1, grade === 1 ? 2 : 5);
          const start = rand(1, 10);
          const seq = [start, start + step, start + step * 2, start + step * 3];
          const correct = start + step * 4;
          const options = [correct - 2, correct - 1, correct, correct + 1].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä—è–¥: ${seq.join(', ')}, ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `–ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –Ω–∞ ${step} –±–æ–ª—å—à–µ: ${correct}! üìä`,
            hint: `–ü–æ—Å–º–æ—Ç—Ä–∏, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ: ${seq[1]}-${seq[0]}=${step}`
          };
        },
        () => {
          const step = rand(1, grade === 1 ? 2 : 4);
          const start = rand(15, 30);
          const seq = [start, start - step, start - step * 2, start - step * 3];
          const correct = start - step * 4;
          const options = [correct - 1, correct, correct + 1, correct + 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä—è–¥: ${seq.join(', ')}, ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `–ß–∏—Å–ª–∞ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è –Ω–∞ ${step}: ${correct}! üìâ`,
            hint: `–ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –Ω–∞ ${step} –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!`
          };
        },
        () => {
          const mult = rand(2, grade === 1 ? 2 : 3);
          const seq = [mult, mult * 2, mult * 3, mult * 4];
          const correct = mult * 5;
          const options = [correct - mult, correct, correct + mult, correct + mult * 2].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ù–∞–π–¥–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: ${seq.join(', ')}, ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `–≠—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ ${mult}: ${correct}! ‚úñÔ∏è`,
            hint: `–ö–∞–∂–¥–æ–µ —á–∏—Å–ª–æ ‚Äî —ç—Ç–æ ${mult} —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ —á—Ç–æ-—Ç–æ!`
          };
        },
        () => {
          const start = rand(1, 5);
          const seq = [start, start + 1, start + 3, start + 6];
          const correct = start + 10;
          const options = [correct - 2, correct - 1, correct, correct + 1].filter(n => n > 0).sort(() => Math.random() - 0.5);
          return {
            question: `–ö–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–µ: ${seq.join(', ')}, ?`,
            options: options.map(String),
            correctAnswer: options.indexOf(correct),
            explanation: `–†–∞–∑–Ω–∏—Ü–∞ —Ä–∞—Å—Ç—ë—Ç: +1, +2, +3, +4. –û—Ç–≤–µ—Ç: ${correct}! üéØ`,
            hint: `–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏: –æ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è!`
          };
        }
      ];
      return questionTypes[rand(0, grade === 1 ? 1 : questionTypes.length - 1)]();
    }
    
    case 'mixed': {
      const mixedTopics = ['addition', 'subtraction', 'multiplication', 'division', 'geometry', 'logic', 'patterns'];
      const randomTopic = mixedTopics[rand(0, mixedTopics.length - 1)];
      return generateTask(randomTopic, grade);
    }
    
    default:
      return generateTask('addition', grade);
  }
};

export default function Index() {
  const [selectedGrade, setSelectedGrade] = useState<number | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);
  const [currentTask, setCurrentTask] = useState<TaskGenerator | null>(null);
  const [score, setScore] = useState(0);
  const [totalTasks, setTotalTasks] = useState(0);
  const [showExplanation, setShowExplanation] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showHint, setShowHint] = useState(false);
  const [isTimerMode, setIsTimerMode] = useState(false);
  const [timeLeft, setTimeLeft] = useState(120);
  const [timerResult, setTimerResult] = useState<TimerResult | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (selectedTopic && selectedGrade && !timerResult) {
      setCurrentTask(generateTask(selectedTopic, selectedGrade));
    }
  }, [selectedTopic, selectedGrade, timerResult]);

  useEffect(() => {
    if (isTimerMode && timeLeft > 0 && !timerResult) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (isTimerMode && timeLeft === 0 && !timerResult) {
      setTimerResult({
        correct: score,
        wrong: totalTasks - score,
        total: totalTasks
      });
    }
  }, [isTimerMode, timeLeft, timerResult, score, totalTasks]);

  const handleGradeSelect = (gradeId: number) => {
    setSelectedGrade(gradeId);
    setSelectedTopic(null);
    setScore(0);
    setTotalTasks(0);
    setIsTimerMode(false);
    setTimeLeft(120);
    setTimerResult(null);
  };

  const handleTopicSelect = (topicId: string, timerMode = false) => {
    setSelectedTopic(topicId);
    setScore(0);
    setTotalTasks(0);
    setShowExplanation(false);
    setSelectedAnswer(null);
    setShowHint(false);
    setIsTimerMode(timerMode);
    setTimeLeft(120);
    setTimerResult(null);
  };

  const handleAnswerSelect = (answerIndex: number) => {
    if (showExplanation || !currentTask) return;
    
    setSelectedAnswer(answerIndex);
    setTotalTasks(totalTasks + 1);
    
    if (answerIndex === currentTask.correctAnswer) {
      setScore(score + 1);
      
      if (isTimerMode) {
        toast({
          title: '‚úÖ –í–µ—Ä–Ω–æ!',
          description: '+1 –±–∞–ª–ª',
          className: 'bg-green-100 border-green-400'
        });
        setTimeout(() => {
          handleNextTask();
        }, 500);
      } else {
        toast({
          title: 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
          description: currentTask.explanation,
          className: 'bg-green-100 border-green-400'
        });
        setShowExplanation(true);
      }
    } else {
      if (isTimerMode) {
        toast({
          title: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ',
          description: `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentTask.options[currentTask.correctAnswer]}`,
          variant: 'destructive'
        });
        setTimeout(() => {
          handleNextTask();
        }, 500);
      } else {
        toast({
          title: '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
          description: '–ü–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!',
          variant: 'destructive'
        });
        setShowExplanation(true);
      }
    }
  };

  const handleNextTask = () => {
    if (selectedTopic && selectedGrade) {
      setCurrentTask(generateTask(selectedTopic, selectedGrade));
      setShowExplanation(false);
      setSelectedAnswer(null);
      setShowHint(false);
    }
  };

  if (timerResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-orange-50 to-purple-50 p-4 md:p-8">
        <div className="max-w-2xl mx-auto">
          <Card className="shadow-2xl border-4 border-white">
            <CardContent className="p-8 text-center">
              <div className="mb-6">
                <h2 className="text-4xl font-bold text-foreground mb-2">–í—Ä–µ–º—è –≤—ã—à–ª–æ! ‚è±Ô∏è</h2>
                <p className="text-xl text-muted-foreground">–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
              </div>
              
              <div className="grid grid-cols-3 gap-4 mb-8">
                <div className="bg-gradient-to-br from-blue-100 to-blue-200 rounded-xl p-6">
                  <Icon name="Target" className="mx-auto mb-2 text-blue-600" size={32} />
                  <div className="text-3xl font-bold text-blue-700">{timerResult.total}</div>
                  <div className="text-sm text-blue-600">–í—Å–µ–≥–æ</div>
                </div>
                <div className="bg-gradient-to-br from-green-100 to-green-200 rounded-xl p-6">
                  <Icon name="CheckCircle" className="mx-auto mb-2 text-green-600" size={32} />
                  <div className="text-3xl font-bold text-green-700">{timerResult.correct}</div>
                  <div className="text-sm text-green-600">–í–µ—Ä–Ω–æ</div>
                </div>
                <div className="bg-gradient-to-br from-red-100 to-red-200 rounded-xl p-6">
                  <Icon name="XCircle" className="mx-auto mb-2 text-red-600" size={32} />
                  <div className="text-3xl font-bold text-red-700">{timerResult.wrong}</div>
                  <div className="text-sm text-red-600">–û—à–∏–±–æ–∫</div>
                </div>
              </div>
              
              <div className="mb-6">
                <div className="text-lg font-medium mb-2">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                <Progress 
                  value={timerResult.total > 0 ? (timerResult.correct / timerResult.total) * 100 : 0} 
                  className="h-4"
                />
                <div className="text-2xl font-bold text-primary mt-2">
                  {timerResult.total > 0 ? Math.round((timerResult.correct / timerResult.total) * 100) : 0}%
                </div>
              </div>
              
              <div className="space-y-3">
                <Button
                  onClick={() => handleTopicSelect('mixed', true)}
                  size="lg"
                  className="w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white font-bold"
                >
                  <Icon name="RotateCcw" className="mr-2" />
                  –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </Button>
                <Button
                  onClick={() => setSelectedTopic(null)}
                  variant="outline"
                  size="lg"
                  className="w-full"
                >
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–∞–º
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (selectedTopic && currentTask && selectedGrade) {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-orange-50 to-purple-50 p-4 md:p-8">
        <div className="max-w-3xl mx-auto">
          <div className="mb-6">
            <Button
              variant="ghost"
              onClick={() => setSelectedTopic(null)}
              className="mb-4"
            >
              <Icon name="ArrowLeft" className="mr-2" />
              –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º
            </Button>
            
            <div className="bg-white rounded-2xl p-4 shadow-lg">
              <div className="flex items-center justify-between mb-2">
                <Badge variant="outline" className="text-base">
                  {grades.find(g => g.id === selectedGrade)?.title}
                </Badge>
                <div className="flex items-center gap-4">
                  {isTimerMode && (
                    <div className={`flex items-center gap-2 ${timeLeft <= 10 ? 'text-red-600 animate-pulse' : 'text-blue-600'}`}>
                      <Icon name="Timer" size={20} />
                      <span className="font-bold text-lg">{minutes}:{seconds.toString().padStart(2, '0')}</span>
                    </div>
                  )}
                  <div className="flex items-center gap-2">
                    <Icon name="Target" className="text-blue-500" size={20} />
                    <span className="font-medium">{totalTasks}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Icon name="Star" className="text-yellow-500" size={20} />
                    <span className="font-bold text-lg">{score}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <Card className="shadow-2xl border-4 border-white animate-scale-in">
            <CardContent className="p-8">
              <div className="text-center mb-8">
                <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
                  {currentTask.question}
                </h2>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {currentTask.options.map((option, index) => (
                  <Button
                    key={index}
                    onClick={() => handleAnswerSelect(index)}
                    disabled={showExplanation}
                    className={`h-24 text-xl font-semibold transition-all transform hover:scale-105 ${
                      selectedAnswer === index
                        ? index === currentTask.correctAnswer
                          ? 'bg-green-500 hover:bg-green-600 text-white'
                          : 'bg-red-500 hover:bg-red-600 text-white'
                        : 'bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white'
                    }`}
                  >
                    {option}
                  </Button>
                ))}
              </div>

              {showExplanation && !isTimerMode && (
                <div className="mt-8 text-center animate-scale-in space-y-4">
                  {selectedAnswer !== currentTask.correctAnswer && (
                    <>
                      {!showHint && (
                        <Button
                          onClick={() => setShowHint(true)}
                          variant="outline"
                          size="lg"
                          className="w-full"
                        >
                          <Icon name="Lightbulb" className="mr-2" />
                          –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
                        </Button>
                      )}
                      
                      {showHint && (
                        <div className="bg-gradient-to-r from-blue-100 to-purple-100 rounded-xl p-6">
                          <div className="flex items-start gap-3">
                            <Icon name="Lightbulb" className="text-yellow-600 flex-shrink-0 mt-1" size={24} />
                            <p className="text-lg font-medium text-left">{currentTask.hint}</p>
                          </div>
                        </div>
                      )}
                    </>
                  )}
                  
                  <div className={`rounded-xl p-6 ${
                    selectedAnswer === currentTask.correctAnswer 
                      ? 'bg-gradient-to-r from-green-100 to-green-200' 
                      : 'bg-gradient-to-r from-yellow-100 to-orange-100'
                  }`}>
                    <p className="text-lg font-medium">{currentTask.explanation}</p>
                  </div>
                  
                  <Button
                    onClick={handleNextTask}
                    size="lg"
                    className="bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white font-bold text-lg px-8"
                  >
                    –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    <Icon name="ArrowRight" className="ml-2" />
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (selectedGrade) {
    const availableTopics = topics.filter(t => t.grades.includes(selectedGrade));
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-orange-50 to-purple-50">
        <div className="container mx-auto px-4 py-8 md:py-12">
          <Button
            variant="ghost"
            onClick={() => setSelectedGrade(null)}
            className="mb-6"
          >
            <Icon name="ArrowLeft" className="mr-2" />
            –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞
          </Button>
          
          <header className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-orange-500 via-purple-500 to-blue-500 bg-clip-text text-transparent mb-4">
              {grades.find(g => g.id === selectedGrade)?.title}
            </h1>
            <p className="text-xl text-foreground/80 font-medium">
              –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            </p>
          </header>

          <div className="max-w-6xl mx-auto mb-8">
            <Card 
              className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-2xl border-4 border-primary bg-gradient-to-r from-orange-500 via-purple-500 to-blue-500"
              onClick={() => handleTopicSelect('mixed', true)}
            >
              <CardContent className="p-6 text-white">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <div className="bg-white/20 rounded-xl p-4">
                      <Icon name="Timer" size={32} className="text-white" />
                    </div>
                    <div className="text-left">
                      <h3 className="text-2xl font-bold mb-1">‚ö° –¢—Ä–µ–Ω–∞–∂—ë—Ä 2 –º–∏–Ω—É—Ç—ã</h3>
                      <p className="text-white/90">–†–µ—à–∏ –º–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Ä–µ–º—è!</p>
                    </div>
                  </div>
                  <Icon name="ArrowRight" size={32} />
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
            {availableTopics.map((topic, index) => (
              <Card
                key={topic.id}
                className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-2xl border-4 border-white animate-scale-in"
                style={{ animationDelay: `${index * 0.1}s` }}
                onClick={() => handleTopicSelect(topic.id, false)}
              >
                <CardContent className="p-6">
                  <div className={`w-full h-32 bg-gradient-to-br ${topic.color} rounded-xl flex items-center justify-center mb-4 shadow-lg`}>
                    <span className="text-6xl">{topic.emoji}</span>
                  </div>
                  <h3 className="text-2xl font-bold text-center text-foreground mb-2">
                    {topic.title}
                  </h3>
                  <div className="flex items-center justify-center gap-2 text-muted-foreground">
                    <Icon name="Infinity" size={20} />
                    <span className="text-sm font-medium">–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</span>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 via-orange-50 to-purple-50">
      <div className="container mx-auto px-4 py-8 md:py-12">
        <header className="text-center mb-12">
          <h1 className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-orange-500 via-purple-500 to-blue-500 bg-clip-text text-transparent mb-4">
            –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî —ç—Ç–æ –≤–µ—Å–µ–ª–æ! üéì
          </h1>
          <p className="text-xl md:text-2xl text-foreground/80 font-medium">
            –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å –∏ –Ω–∞—á–Ω–∏ –æ–±—É—á–µ–Ω–∏–µ
          </p>
        </header>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-5xl mx-auto">
          {grades.map((grade, index) => (
            <Card
              key={grade.id}
              className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-2xl border-4 border-white animate-scale-in"
              style={{ animationDelay: `${index * 0.1}s` }}
              onClick={() => handleGradeSelect(grade.id)}
            >
              <CardContent className="p-8">
                <div className={`w-full h-32 bg-gradient-to-br ${grade.color} rounded-xl flex items-center justify-center mb-4 shadow-lg`}>
                  <span className="text-5xl font-bold text-white">{grade.id}</span>
                </div>
                <h3 className="text-2xl font-bold text-center text-foreground">
                  {grade.title}
                </h3>
              </CardContent>
            </Card>
          ))}
        </div>

        <footer className="mt-16 text-center">
          <Card className="inline-block bg-white/80 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="flex items-center gap-3 text-foreground/70">
                <Icon name="Sparkles" className="text-yellow-500" size={24} />
                <p className="text-lg font-medium">
                  –†–µ—à–∞–π –∑–∞–¥–∞—á–∫–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥–æ—á–∫–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –≥–µ–Ω–∏–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! ‚≠ê
                </p>
                <Icon name="Sparkles" className="text-yellow-500" size={24} />
              </div>
            </CardContent>
          </Card>
        </footer>
      </div>
    </div>
  );
}